diff --git a/ansicolors.lua b/ansicolors.lua
index 13d77b6..7fb3461 100644
--- a/ansicolors.lua
+++ b/ansicolors.lua
@@ -23,7 +23,7 @@ local tostring = tostring
 local setmetatable = setmetatable
 local schar = string.char
 
-module 'ansicolors'
+module "rfsm.ansicolors"
 
 local colormt = {}
 
diff --git a/rfsm.lua b/rfsm.lua
index 034695f..5d1dc27 100644
--- a/rfsm.lua
+++ b/rfsm.lua
@@ -34,7 +34,7 @@
 -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 --
 
-require ('utils')
+local utils = require ("rfsm.utils")
 
 local table = table
 local io = io
@@ -54,7 +54,6 @@ local setmetatable = setmetatable
 local getmetatable = getmetatable
 local unpack = unpack
 local error = error
-local utils = utils
 
 module("rfsm")
 
diff --git a/rfsm_await.lua b/rfsm_await.lua
index 2b225fb..2fd3c38 100644
--- a/rfsm_await.lua
+++ b/rfsm_await.lua
@@ -10,17 +10,17 @@
 --
 
 local rfsm = require "rfsm"
-local utils = require "utils"
+local utils = require "rfsm.utils"
 local string, print, ipairs, pairs = string, print, ipairs, pairs
 local get_sta_mode = rfsm.get_sta_mode
 
-module("rfsm_await")
+module("rfsm.await")
 
 --- Pre-process await and setup handlers.
 -- @param fsm initalized root fsm.
 local function expand_await(fsm)
 
-   fsm.info("rfsm_await: await extension loaded")
+   fsm.info("rfsm.await: await extension loaded")
 
    --- check and parse an await spec.
    -- @returns a table of await events or false if event is not an
diff --git a/rfsm_checkevents.lua b/rfsm_checkevents.lua
index 927cb54..2301573 100644
--- a/rfsm_checkevents.lua
+++ b/rfsm_checkevents.lua
@@ -5,7 +5,7 @@
 -- otherwise.
 --
 
-module("rfsm_checkevents", package.seeall)
+module("rfsm.checkevents", package.seeall)
 
 local function setup_checkevents(fsm)
 
@@ -17,7 +17,7 @@ local function setup_checkevents(fsm)
       end
    end
 
-   fsm.info("rfsm_checkevents: checkevents extension loaded")
+   fsm.info("rfsm.checkevents: checkevents extension loaded")
 
    -- build list of known events   
    local known_events = {
@@ -42,4 +42,4 @@ local function setup_checkevents(fsm)
    rfsm.pre_step_hook_add(fsm, pre_step_hook)
 end
 
-rfsm.preproc[#rfsm.preproc+1] = setup_checkevents
\ No newline at end of file
+rfsm.preproc[#rfsm.preproc+1] = setup_checkevents
diff --git a/rfsm_emem.lua b/rfsm_emem.lua
index 200de28..cec20ee 100644
--- a/rfsm_emem.lua
+++ b/rfsm_emem.lua
@@ -17,7 +17,7 @@ local rfsm = require("rfsm")
 local print, ipairs, pairs = print, ipairs, pairs
 
 
-module 'rfsm_emem'
+module "rfsm.emem"
 
 --- Reset the event memory of a state
 -- @param state the state of which memory shall be cleared.
@@ -50,7 +50,8 @@ end
 -- @param fsm initialized root fsm.
 local function setup_emem(fsm)
 
-   fsm.info("rfsm_emem: event memory extension loaded")
+   fsm.info("rfsm.emem: event memory extension loaded")
+
 
    -- create emem tables
    rfsm.mapfsm(function (s, p)
@@ -77,4 +78,4 @@ end
 
 
 -- install setup_emem as preproc hook
-rfsm.preproc[#rfsm.preproc+1] = setup_emem
\ No newline at end of file
+rfsm.preproc[#rfsm.preproc+1] = setup_emem
diff --git a/rfsm_marsh.lua b/rfsm_marsh.lua
index f51cb29..ae47d1d 100644
--- a/rfsm_marsh.lua
+++ b/rfsm_marsh.lua
@@ -35,12 +35,12 @@
 --
 
 local rfsm = require ("rfsm")
-local utils = require ("utils")
+local utils = require ("rfsm.utils")
 local pcall = pcall
 local tostring = tostring
 local print = print -- debugging only
 
-module("rfsm_marsh")
+module("rfsm.marsh")
 
 -- shortcuts
 local mapfsm = rfsm.mapfsm
diff --git a/rfsm_preview.lua b/rfsm_preview.lua
index 201750d..b1f1feb 100644
--- a/rfsm_preview.lua
+++ b/rfsm_preview.lua
@@ -11,7 +11,7 @@ local print, ipairs, pairs, error, type = print, ipairs, pairs, error, type
 
 local actchild_get = rfsm.actchild_get
 
-module 'rfsm_preview'
+module "rfsm.preview"
 
 local function do_preview(fsm)
    local function preview_otrs(state)
@@ -36,7 +36,7 @@ end
 --- Setup preview coordination.
 -- @param fsm initialized root fsm.
 local function setup_preview(fsm)
-   fsm.info("rfsm_preview: discrete preview extension loaded")
+   fsm.info("rfsm.preview: discrete preview extension loaded")
    
    rfsm.mapfsm(function (tr)
 		  if tr.likely and type(tr.likely) ~= 'function' then
@@ -55,4 +55,4 @@ local function setup_preview(fsm)
 end
 
 -- install setup_preview as preproc hook
-rfsm.preproc[#rfsm.preproc+1] = setup_preview
\ No newline at end of file
+rfsm.preproc[#rfsm.preproc+1] = setup_preview
diff --git a/rfsm_timeevent.lua b/rfsm_timeevent.lua
index d158485..5134f2d 100644
--- a/rfsm_timeevent.lua
+++ b/rfsm_timeevent.lua
@@ -34,17 +34,15 @@
 -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 --
 
-require "time"
-require "rfsm"
+local time = require "rfsm.time"
+local rfsm = require "rfsm"
 
-local utils=require("utils")
+local utils = require "rfsm.utils"
 local assert = assert
 local type = type
 local tonumber = tonumber
 local math = math
 local string = string
-local rfsm = rfsm
-local time = time
 local ts2str = time.ts2str
 
 --- This module extends the core rFSM model with time events.
@@ -77,7 +75,7 @@ local ts2str = time.ts2str
 -- and (possibly) generates the time event. A "master" timeevent check
 -- function (check_act_timeevents) calls all check_ handlers of the
 -- current active states during post_step_hook.
-module 'rfsm_timeevent'
+module "rfsm.timeevent"
 
 local gettime = false
 debug=false
@@ -98,7 +96,7 @@ end
 -- @param sendf function to call for sending events
 local function gen_rel_timeevent_mgr(name, timespec, sendf, fsm)
    assert(type(gettime) == 'function',
-	  "rfsm_timeevent error. Failed to install handlers: no gettime function set.")
+	  "rfsm.timeevent error. Failed to install handlers: no gettime function set.")
 
    local ts = { sec=math.floor(timespec), nsec=((timespec%1)*100000000) }
    local tend = { sec=false, nsec=false }
@@ -132,7 +130,7 @@ end
 local function expand_timeevent(fsm)
    local function se(...) rfsm.send_events(fsm, ...) end
 
-   fsm.info("rfsm_timeevent: time-event extension loaded")
+   fsm.info("rfsm.timeevent: time-event extension loaded")
 
    rfsm.mapfsm(function (tr, p)
 		  if not tr.events then return end
diff --git a/rfsmpp.lua b/rfsmpp.lua
index 8ed970b..3312da2 100644
--- a/rfsmpp.lua
+++ b/rfsmpp.lua
@@ -37,16 +37,13 @@
 -- Various pretty printing functions to make life easier
 --
 
-require("ansicolors")
-require("utils")
-require("rfsm")
+local ac = require("rfsm.ansicolors")
+local utils = require("rfsm.utils")
+local rfsm = require("rfsm")
 
 local unpack, print, type, pairs, assert = unpack, print, type, pairs, assert
 local table = table
-local utils = utils
 local string = string
-local ac = ansicolors
-local rfsm = rfsm
 
 -- some shortcuts
 local is_meta = rfsm.is_meta
@@ -56,7 +53,7 @@ local is_composite = rfsm.is_composite
 local sta_mode = rfsm.sta_mode
 local fsmobj_tochar = rfsm.fsmobj_tochar
 
-module("rfsmpp")
+module("rfsm.pp")
 
 
 local pad = 20
diff --git a/time.lua b/time.lua
index bb0e6c6..2fa162f 100644
--- a/time.lua
+++ b/time.lua
@@ -6,7 +6,7 @@
 
 local math = math
 
-module("time")
+module("rfsm.time")
 
 -- constants
 local ns_per_s = 1000000000
@@ -115,4 +115,4 @@ end
 -- @return time string
 function tostr_us(sec, nsec)
    return tous(sec, nsec) .. "us"
-end
\ No newline at end of file
+end
diff --git a/utils.lua b/utils.lua
index 7f0b1c9..3dc0b1c 100644
--- a/utils.lua
+++ b/utils.lua
@@ -6,7 +6,7 @@
 local type, pairs, ipairs, setmetatable, getmetatable, assert, table, print, tostring, string, io, unpack, error =
    type, pairs, ipairs, setmetatable, getmetatable, assert, table, print, tostring, string, io, unpack, error
 
-module('utils')
+module('rfsm.utils')
 
 -- increment major on API breaks
 -- increment minor on non breaking changes
